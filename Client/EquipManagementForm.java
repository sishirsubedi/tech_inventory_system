/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */



import java.awt.CardLayout;
import java.awt.Component;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.net.Socket;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;

/**
 *
 * @author Jose
 */
public class EquipManagementForm extends javax.swing.JFrame {

    /**
     * Creates new form EquipManagementForm
     */
    
    AdminForm preForm;
    private boolean checkedOut;
    private static final String SERVER_NAME = "localhost";
    private static final int PORT_NUMBER = 8765;
    
    public EquipManagementForm() {
        initComponents();
    }
    
    public EquipManagementForm(AdminForm form) {
        initComponents();
        preForm = form;
        //this.setLayout(null);
        //computerPanel.setLayout(null);
        //cameraPanel.setLayout(null);
        deviceInfoSearchPanel.setVisible(false);
        deviceDetailsPanel.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        manageGroup = new javax.swing.ButtonGroup();
        deviceGroup = new javax.swing.ButtonGroup();
        messagePane = new javax.swing.JOptionPane();
        addERBtn = new javax.swing.JRadioButton();
        removeERBtn = new javax.swing.JRadioButton();
        updateERBtn = new javax.swing.JRadioButton();
        deviceInfoSearchPanel = new javax.swing.JPanel();
        searchPanel = new javax.swing.JPanel();
        eBarcodeLabel = new javax.swing.JLabel();
        searchCode = new javax.swing.JTextField();
        retrieveBtn = new javax.swing.JButton();
        devicePanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        bCodeBox = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        serialBox = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        deviceBox = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        condBox = new javax.swing.JTextField();
        computerBtn = new javax.swing.JRadioButton();
        cameraBtn = new javax.swing.JRadioButton();
        hpBtn = new javax.swing.JRadioButton();
        jLabel15 = new javax.swing.JLabel();
        deviceDetailsPanel = new javax.swing.JPanel();
        computerPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cpuBox = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        ramBox = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        diskBox = new javax.swing.JTextField();
        screenLabel = new javax.swing.JLabel();
        screenBox = new javax.swing.JTextField();
        touchCheck = new javax.swing.JCheckBox();
        laptopCheck = new javax.swing.JCheckBox();
        cameraPanel = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        cTypeBox = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        mpBox = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        scBox = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        stBox = new javax.swing.JTextField();
        hpPanel = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        hpTypeBox = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        cordBox = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        plugBox = new javax.swing.JTextField();
        micCheck = new javax.swing.JCheckBox();
        volumeCheck = new javax.swing.JCheckBox();
        btnSave = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Equipment Management");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        manageGroup.add(addERBtn);
        addERBtn.setText("Add Equipment");
        addERBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addERBtnActionPerformed(evt);
            }
        });

        manageGroup.add(removeERBtn);
        removeERBtn.setText("Remove Equipment");
        removeERBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeERBtnActionPerformed(evt);
            }
        });

        manageGroup.add(updateERBtn);
        updateERBtn.setText("Update Equipment");
        updateERBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateERBtnActionPerformed(evt);
            }
        });

        deviceInfoSearchPanel.setEnabled(false);
        deviceInfoSearchPanel.setLayout(new java.awt.CardLayout());

        searchPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Search", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N
        searchPanel.setPreferredSize(new java.awt.Dimension(380, 57));
        searchPanel.setRequestFocusEnabled(false);

        eBarcodeLabel.setText("Device Barcode:");

        searchCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchCodeActionPerformed(evt);
            }
        });

        retrieveBtn.setText("Retrieve Information");
        retrieveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                retrieveBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout searchPanelLayout = new javax.swing.GroupLayout(searchPanel);
        searchPanel.setLayout(searchPanelLayout);
        searchPanelLayout.setHorizontalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(eBarcodeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchCode, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(retrieveBtn)
                .addContainerGap(43, Short.MAX_VALUE))
        );
        searchPanelLayout.setVerticalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(eBarcodeLabel)
                    .addComponent(searchCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(retrieveBtn))
                .addContainerGap(54, Short.MAX_VALUE))
        );

        deviceInfoSearchPanel.add(searchPanel, "search");

        devicePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Device Information", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        jLabel2.setText("Device Barcode:");

        jLabel3.setText("Serial Number:");

        jLabel4.setText("Device Name:");

        jLabel5.setText("Condition:");

        deviceGroup.add(computerBtn);
        computerBtn.setSelected(true);
        computerBtn.setText("Computer");
        computerBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                computerBtnActionPerformed(evt);
            }
        });

        deviceGroup.add(cameraBtn);
        cameraBtn.setText("Camera");
        cameraBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cameraBtnActionPerformed(evt);
            }
        });

        deviceGroup.add(hpBtn);
        hpBtn.setText("Headphones");
        hpBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hpBtnActionPerformed(evt);
            }
        });

        jLabel15.setText("Device Type:");

        javax.swing.GroupLayout devicePanelLayout = new javax.swing.GroupLayout(devicePanel);
        devicePanel.setLayout(devicePanelLayout);
        devicePanelLayout.setHorizontalGroup(
            devicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(devicePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(devicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel15)
                    .addComponent(jLabel4)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(devicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(devicePanelLayout.createSequentialGroup()
                        .addGroup(devicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(deviceBox, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bCodeBox, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(devicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(devicePanelLayout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(serialBox))
                            .addGroup(devicePanelLayout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(condBox))))
                    .addGroup(devicePanelLayout.createSequentialGroup()
                        .addComponent(computerBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cameraBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(hpBtn)
                        .addGap(0, 45, Short.MAX_VALUE)))
                .addContainerGap())
        );
        devicePanelLayout.setVerticalGroup(
            devicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(devicePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(devicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(bCodeBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(serialBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(devicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(deviceBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(condBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 6, Short.MAX_VALUE)
                .addGroup(devicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(computerBtn)
                    .addComponent(cameraBtn)
                    .addComponent(hpBtn))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        deviceInfoSearchPanel.add(devicePanel, "info");

        deviceDetailsPanel.setLayout(new java.awt.CardLayout());

        computerPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Computer Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        jLabel1.setText("CPU:");

        jLabel6.setText("Ram:");

        jLabel7.setText("Disk Size:");

        screenLabel.setText("Screen Size:");
        screenLabel.setEnabled(false);

        screenBox.setEnabled(false);

        touchCheck.setText("Touch Screen");
        touchCheck.setEnabled(false);

        laptopCheck.setText("Laptop");
        laptopCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                laptopCheckActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout computerPanelLayout = new javax.swing.GroupLayout(computerPanel);
        computerPanel.setLayout(computerPanelLayout);
        computerPanelLayout.setHorizontalGroup(
            computerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(computerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(computerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(computerPanelLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cpuBox, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ramBox, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(computerPanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(laptopCheck)
                        .addGap(12, 12, 12)
                        .addComponent(screenLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(screenBox)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(computerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(computerPanelLayout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(diskBox))
                    .addComponent(touchCheck))
                .addContainerGap())
        );
        computerPanelLayout.setVerticalGroup(
            computerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(computerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(computerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cpuBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(ramBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(diskBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(computerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(screenLabel)
                    .addComponent(screenBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(touchCheck)
                    .addComponent(laptopCheck))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        deviceDetailsPanel.add(computerPanel, "computer");
        computerPanel.getAccessibleContext().setAccessibleDescription("");

        cameraPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Camera Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        jLabel8.setText("Camera Type:");

        jLabel9.setText("Megapixel:");

        jLabel10.setText("Storage Capacity:");

        jLabel11.setText("Storage Type:");

        javax.swing.GroupLayout cameraPanelLayout = new javax.swing.GroupLayout(cameraPanel);
        cameraPanel.setLayout(cameraPanelLayout);
        cameraPanelLayout.setHorizontalGroup(
            cameraPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cameraPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(cameraPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(cameraPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cTypeBox, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(stBox, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(cameraPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel10)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(cameraPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mpBox)
                    .addComponent(scBox))
                .addContainerGap())
        );
        cameraPanelLayout.setVerticalGroup(
            cameraPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cameraPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(cameraPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(cTypeBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(mpBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(cameraPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(stBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(scBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        deviceDetailsPanel.add(cameraPanel, "camera");

        hpPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Headphones Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        jLabel12.setText("Headphone Type:");

        jLabel13.setText("Cord Length:");

        jLabel14.setText("Plug Diameter:");

        micCheck.setText("Microphone");

        volumeCheck.setText("Volume Control");

        javax.swing.GroupLayout hpPanelLayout = new javax.swing.GroupLayout(hpPanel);
        hpPanel.setLayout(hpPanelLayout);
        hpPanelLayout.setHorizontalGroup(
            hpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(hpPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(hpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(hpPanelLayout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(plugBox, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)
                        .addComponent(micCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(volumeCheck)
                        .addGap(0, 46, Short.MAX_VALUE))
                    .addGroup(hpPanelLayout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(hpTypeBox, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cordBox)))
                .addContainerGap())
        );
        hpPanelLayout.setVerticalGroup(
            hpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(hpPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(hpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(hpTypeBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13)
                    .addComponent(cordBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(hpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(plugBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(volumeCheck)
                    .addComponent(micCheck))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        hpPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {cordBox, plugBox});

        deviceDetailsPanel.add(hpPanel, "headphones");

        btnSave.setText("Save");
        btnSave.setPreferredSize(new java.awt.Dimension(75, 23));
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(addERBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeERBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(updateERBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(158, 158, 158)
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(deviceInfoSearchPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(deviceDetailsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addERBtn)
                    .addComponent(removeERBtn)
                    .addComponent(updateERBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(deviceInfoSearchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deviceDetailsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        preForm.setVisible(true);
    }//GEN-LAST:event_formWindowClosed

    private void updateERBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateERBtnActionPerformed
        clearAllPanels();
        showDeviceInfoSearchCard("search"); // show the device search panel
        deviceDetailsPanel.setVisible(false); // hide the device details panel
        btnSave.setText("Update"); // relabel the save button
        btnSave.setEnabled(false); // disable the save button
    }//GEN-LAST:event_updateERBtnActionPerformed

    private void removeERBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeERBtnActionPerformed
        clearAllPanels();
        showDeviceInfoSearchCard("search"); // show the device search panel
        deviceDetailsPanel.setVisible(false); // hide the device details panel
        btnSave.setText("Remove"); // relabel the save button
        btnSave.setEnabled(false); // disable the save button
    }//GEN-LAST:event_removeERBtnActionPerformed

    private void addERBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addERBtnActionPerformed
        clearAllPanels();
        showDeviceInfoSearchCard("info"); // show the device info panel
        deviceDetailsPanel.setVisible(false); // hide the device details panel
        // initialize the device info panel
        bCodeBox.setEnabled(true);
        deviceGroup.clearSelection();
        btnSave.setText("Add"); // relabel the save button
        btnSave.setEnabled(true); // enable the save button
    }//GEN-LAST:event_addERBtnActionPerformed
    
    private void computerBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_computerBtnActionPerformed
        showDeviceDetailsCard("computer"); // show the computer panel
        // initialize computer panel
        laptopCheck.setSelected(false);
        updateLaptopControlsDisplay();
    }//GEN-LAST:event_computerBtnActionPerformed

    private void cameraBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cameraBtnActionPerformed
        showDeviceDetailsCard("camera"); // show the camera panel
    }//GEN-LAST:event_cameraBtnActionPerformed

    private void hpBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hpBtnActionPerformed
        showDeviceDetailsCard("headphones"); // show the headphones panel
    }//GEN-LAST:event_hpBtnActionPerformed

    private void laptopCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_laptopCheckActionPerformed
        updateLaptopControlsDisplay();
    }//GEN-LAST:event_laptopCheckActionPerformed
    
    private void updateLaptopControlsDisplay() {
        JComponent[] laptopControls = {screenLabel, screenBox, touchCheck};
        for (JComponent laptopControl : laptopControls) {
                laptopControl.setEnabled(laptopCheck.isSelected());
            }
    }
    
    private void retrieveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_retrieveBtnActionPerformed
        try{
            Socket socket = new Socket(SERVER_NAME, PORT_NUMBER);
            String action = "getDevice";
            ObjectOutputStream output = new ObjectOutputStream(socket.getOutputStream());
            output.writeObject(action);
            
            ObjectInputStream input = new ObjectInputStream(socket.getInputStream());
            String response = (String)input.readObject();
            System.out.println(response);
            if(response.equals("OK")){
                System.out.println(response);
                getDevice(socket);
            }else{
                JOptionPane.showMessageDialog(messagePane, "Error");
            }
            input.close();
            output.close();
            socket.close();   
        }catch(Exception e){
            System.err.println("Error: " + e.getMessage());
        }
    }//GEN-LAST:event_retrieveBtnActionPerformed

    private void searchCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchCodeActionPerformed
        retrieveBtn.doClick();
    }//GEN-LAST:event_searchCodeActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        DeviceManagerAction devMgmtAction = getDeviceManagerAction();

        try {
            switch (devMgmtAction) {
                case ADD:
                    addDevice(createDevice());
                    break;
                case UPDATE:
                    updateDevice(createDevice());
                    break;
                case REMOVE:
                    removeDevice();
                    break;
            }
        } catch (Exception e) {
            System.err.println("Error: " + e.getMessage());
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void showCard(JPanel panel, String cardName) {
        panel.setVisible(true);
        CardLayout cardLayout = (CardLayout) panel.getLayout();
        cardLayout.show(panel, cardName);
    }

    private void showDeviceInfoSearchCard(String cardName) {
        showCard(deviceInfoSearchPanel, cardName);
    }

    private void showDeviceDetailsCard(String cardName) {
        showCard(deviceDetailsPanel, cardName);
    }

    private Device createDevice() {
        Device device = null;
        try {
            if (computerBtn.isSelected()) {
                if (!laptopCheck.isSelected()) {
                    device = new Computer(
                            bCodeBox.getText(), deviceBox.getText(), serialBox.getText(), condBox.getText(), Device.deviceType.computer,
                            cpuBox.getText(), ramBox.getText(), diskBox.getText());
                } else {
                    device = new Laptop(
                            bCodeBox.getText(), deviceBox.getText(), serialBox.getText(), condBox.getText(), Device.deviceType.laptop,
                            cpuBox.getText(), ramBox.getText(), diskBox.getText(), screenBox.getText(), touchCheck.isSelected());
                }
            } else if (cameraBtn.isSelected()) {
                device = new Camera(
                        bCodeBox.getText(), deviceBox.getText(), serialBox.getText(), condBox.getText(), Device.deviceType.camera,
                        cTypeBox.getText(), mpBox.getText(), scBox.getText(), stBox.getText());
            } else if (hpBtn.isSelected()) {
                int cordLength = 0;
                double plugDiameter = 0;
                try {
                    cordLength = Integer.parseInt(cordBox.getText());
                    plugDiameter = Double.parseDouble(plugBox.getText());
                    device = new Headphones(
                            bCodeBox.getText(), deviceBox.getText(), serialBox.getText(), condBox.getText(), Device.deviceType.headphones,
                            hpTypeBox.getText(), micCheck.isSelected(), volumeCheck.isSelected(), cordLength, plugDiameter);

                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(messagePane, "Invalid Cord Length or Cord Diameter input");
                    System.out.println(e.toString());
                    throw(e);
                }
            }
        } catch (Exception e) {
            System.err.println("Error: " + e.getMessage());
            throw(e);
        }
        return device;
    }
    
    private void clearPanel(JPanel panel) {
        for (Component component : panel.getComponents()) {
            if (component instanceof JTextField) {
                ((JTextField) component).setText("");
            } else if (component instanceof JCheckBox) {
                ((JCheckBox) component).setSelected(false);
            }
        }
    }
        
    private void clearAllPanels() {
        for (JPanel panel : new JPanel[] {searchPanel, devicePanel, computerPanel, cameraPanel, hpPanel})
            clearPanel(panel);
    }
    
    private enum DeviceManagerAction {ADD, REMOVE, UPDATE};

    private DeviceManagerAction getDeviceManagerAction() {
        DeviceManagerAction devAction = null;

        if (addERBtn.isSelected() == true) {
            devAction = DeviceManagerAction.ADD;
        } else if (removeERBtn.isSelected() == true) {
            devAction = DeviceManagerAction.REMOVE;
        } else if (updateERBtn.isSelected() == true) {
            devAction = DeviceManagerAction.UPDATE;
        }

        return devAction;
    }
       
    private Object doServerActionToObject(String action, Object obj) {
        Object response = null;
        try {
            Socket socket = new Socket(SERVER_NAME, PORT_NUMBER);
            ObjectOutputStream output = null;
            ObjectInputStream input = null;
            
            output = new ObjectOutputStream(socket.getOutputStream());
            output.writeObject(action);
            input = new ObjectInputStream(socket.getInputStream());
            response = (String) input.readObject();

            if (response.equals("OK")) {
                System.out.println(response);
                output = new ObjectOutputStream(socket.getOutputStream());
                output.writeObject(obj);
                input = new ObjectInputStream(socket.getInputStream());
                response = input.readObject();
            }
            input.close();
            output.close();
            socket.close();
        } catch (Exception e) {
            System.err.println("Error: " + e.getMessage());
        }
        
        return response;
    }

    private void addDevice(Device device) {
        try {
            String response = (String) doServerActionToObject("addDevice", device);
            if (response.equals("1")) {
                JOptionPane.showMessageDialog(messagePane, "Device added succesfully");
            } else {
                JOptionPane.showMessageDialog(messagePane, "Device already exists");
            }
        } catch (Exception e) {
            System.err.println("Error: " + e.getMessage());
        }
    }  
    
    private void removeDevice() {
       if(checkedOut != true){
        try {
            String response = (String) doServerActionToObject("removeDevice", bCodeBox.getText());
            if (response.equals("1")) {
                JOptionPane.showMessageDialog(messagePane, "Device removed succesfully");
            } else {
                JOptionPane.showMessageDialog(messagePane, "Device does not exist");
            }
        } catch (Exception e) {
            System.err.println("Error: " + e.getMessage());
        }   
       }else{
          JOptionPane.showMessageDialog(messagePane, "Cannot Delete CheckedOut Item");
      }
       
    }
    
    private void updateDevice(Device device) {
        if(checkedOut != true){
            try {
                String response = (String) doServerActionToObject("updateDevice", device);
                if (response.equals("1")) {
                    JOptionPane.showMessageDialog(messagePane, "Device updated succesfully");
                } else {
                    JOptionPane.showMessageDialog(messagePane, "Device does not exist");
                }
            } catch (Exception e) {
                System.err.println("Error: " + e.getMessage());
            }
        }else{
            JOptionPane.showMessageDialog(messagePane, "Cannont Update a device that is checked out");
        }
    }
    
    private void getDevice(Socket socket){
        try{
            ObjectOutputStream output = new ObjectOutputStream(socket.getOutputStream());
            output.writeObject(searchCode.getText());
            
            ObjectInputStream input = new ObjectInputStream(socket.getInputStream());
            String response = (String)input.readObject();
            System.out.println(response);
            if(response.equals("1")){
                JOptionPane.showMessageDialog(messagePane, "Device retrieved Succesfully");
                input = new ObjectInputStream(socket.getInputStream());
                Device d = (Device)input.readObject();
                updateLabels(d);
                System.out.println(d.toString());
                bCodeBox.setEnabled(false);
                btnSave.setEnabled(true);
            }else{
                JOptionPane.showMessageDialog(messagePane, "Device does not Exists");
                //btnSave.setEnabled(false);
            }
        }catch(Exception e){
            System.err.println("Error: " + e.getMessage());
        }
    }
    
    private void updateLabels(Device d){
        clearAllPanels();
        showDeviceInfoSearchCard("info"); // show the device info panel
        deviceDetailsPanel.setVisible(false); // hide the device details panel
        // initialize the device info panel
        bCodeBox.setEnabled(true);
        deviceGroup.clearSelection();
        
        bCodeBox.setText(d.getId());
        serialBox.setText(d.getSerialNumber());
        deviceBox.setText(d.getDeviceName());
        condBox.setText(d.getCondition());
        
        if (d instanceof Computer) {
            Computer computer = (Computer) d;
            computerBtn.doClick();
            // Display the computers's information
            cpuBox.setText(computer.getCPU());
            ramBox.setText(computer.getRAM());
            diskBox.setText(computer.getDiskSize());
            // If the copmuter is a laptop, display additional information
            if (computer instanceof Laptop) {
                laptopCheck.doClick();
                screenBox.setText(((Laptop) computer).getScreenSize());
                touchCheck.setSelected(((Laptop) computer).isIsTouch());
            }
        } else if (d instanceof Camera) {
            Camera c = (Camera) d;
            cameraBtn.doClick();
            // Display the camera's information
            cTypeBox.setText(c.getCameraType());
            mpBox.setText(c.getMegaPixel());
            scBox.setText(c.getStorageCapacity());
            stBox.setText(c.getStorageType());
        } else if (d instanceof Headphones) {
            Headphones headphones = (Headphones) d;
            hpBtn.doClick();
            // Display the headphones's information
            hpTypeBox.setText(headphones.getHeadphonesType());
            cordBox.setText(Integer.toString(headphones.getCordLength()));
            plugBox.setText(Double.toString(headphones.getPlugDiameter()));
            micCheck.setSelected(headphones.isHasMic());
            volumeCheck.setSelected(headphones.isHasVolumeControl());
        }
        String s = d.getCheckedOutTo();
        if(s == null)
            checkedOut = false;
        else
            checkedOut = true;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EquipManagementForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EquipManagementForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EquipManagementForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EquipManagementForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EquipManagementForm().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton addERBtn;
    private javax.swing.JTextField bCodeBox;
    private javax.swing.JButton btnSave;
    private javax.swing.JTextField cTypeBox;
    private javax.swing.JRadioButton cameraBtn;
    private javax.swing.JPanel cameraPanel;
    private javax.swing.JRadioButton computerBtn;
    private javax.swing.JPanel computerPanel;
    private javax.swing.JTextField condBox;
    private javax.swing.JTextField cordBox;
    private javax.swing.JTextField cpuBox;
    private javax.swing.JTextField deviceBox;
    private javax.swing.JPanel deviceDetailsPanel;
    private javax.swing.ButtonGroup deviceGroup;
    private javax.swing.JPanel deviceInfoSearchPanel;
    private javax.swing.JPanel devicePanel;
    private javax.swing.JTextField diskBox;
    private javax.swing.JLabel eBarcodeLabel;
    private javax.swing.JRadioButton hpBtn;
    private javax.swing.JPanel hpPanel;
    private javax.swing.JTextField hpTypeBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JCheckBox laptopCheck;
    private javax.swing.ButtonGroup manageGroup;
    private javax.swing.JOptionPane messagePane;
    private javax.swing.JCheckBox micCheck;
    private javax.swing.JTextField mpBox;
    private javax.swing.JTextField plugBox;
    private javax.swing.JTextField ramBox;
    private javax.swing.JRadioButton removeERBtn;
    private javax.swing.JButton retrieveBtn;
    private javax.swing.JTextField scBox;
    private javax.swing.JTextField screenBox;
    private javax.swing.JLabel screenLabel;
    private javax.swing.JTextField searchCode;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JTextField serialBox;
    private javax.swing.JTextField stBox;
    private javax.swing.JCheckBox touchCheck;
    private javax.swing.JRadioButton updateERBtn;
    private javax.swing.JCheckBox volumeCheck;
    // End of variables declaration//GEN-END:variables
}
